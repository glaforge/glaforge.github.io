<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>micronaut on Guillaume Laforge</title><link>https://glaforge.github.io/tags/micronaut/</link><description>Recent content in micronaut on Guillaume Laforge</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright><lastBuildDate>Mon, 24 Oct 2022 11:33:25 +0100</lastBuildDate><atom:link href="https://glaforge.github.io/tags/micronaut/index.xml" rel="self" type="application/rss+xml"/><item><title>Build Deploy Java 17 Apps on Cloud Run With Cloud Native Buildpacks on Temurin</title><link>https://glaforge.github.io/posts/build-deploy-java-17-apps-on-cloud-run-with-cloud-native-buildpacks-on-temurin/</link><pubDate>Mon, 24 Oct 2022 11:33:25 +0100</pubDate><guid>https://glaforge.github.io/posts/build-deploy-java-17-apps-on-cloud-run-with-cloud-native-buildpacks-on-temurin/</guid><description>In this article, let&amp;rsquo;s revisit the topic of deploying Java apps on Cloud Run. In particular, I&amp;rsquo;ll deploy a Micronaut app, written with Java 17, and built with Gradle.
With a custom Dockerfile On Cloud Run, you deploy containerised applications, so you have to decide the way you want to build a container for your application. In a previous article, I showed an example of using your own Dockerfile, which would look as follows with an OpenJDK 17, and enabling preview features of the language:</description></item><item><title>Reuse Old Smartphones to Monitor 3D Prints With Webrtc Websockets and Serverless</title><link>https://glaforge.github.io/talks/reuse-old-smartphones-to-monitor-3d-prints-with-webrtc-websockets-and-serverless/</link><pubDate>Thu, 13 Oct 2022 13:59:44 +0100</pubDate><guid>https://glaforge.github.io/talks/reuse-old-smartphones-to-monitor-3d-prints-with-webrtc-websockets-and-serverless/</guid><description>Reuse old smartphones to monitor 3D prints, with WebRTC, WebSockets and Serverless Monitoring my 3D prints in my basement means climbing lots of stairs back and forth! So here’s my story about how I reused an old smartphone to check the status of my prints. I built a small web app that uses WebRTC to exchange video streams between my broadcasting smartphone and viewers, with WebSockets for signaling, and a serverless platform for easily deploying and hosting my containerized app.</description></item><item><title>Skyrocketing Micronaut Microservices Into Google Cloud</title><link>https://glaforge.github.io/talks/skyrocketing-micronaut-microservices-into-google-cloud/</link><pubDate>Fri, 25 Jun 2021 14:27:21 +0100</pubDate><guid>https://glaforge.github.io/talks/skyrocketing-micronaut-microservices-into-google-cloud/</guid><description>Instead of spending too much time on infrastructure, take advantage of readily available serverless solutions. Focus on your Micronaut code, and deploy it rapidly as a function, an application, or within a container, on Google Cloud Platform, with Cloud Functions, App Engine, or Cloud Run.
In this presentation, you’ll discover the options you have to deploy your Micronaut applications and services on Google Cloud. With Micronaut Launch, it’s easy to get started with a template project, and with a few tweaks, you can then push your code to production.</description></item></channel></rss>