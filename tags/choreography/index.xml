<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>choreography on Guillaume Laforge</title><link>https://glaforge.github.io/tags/choreography/</link><description>Recent content in choreography on Guillaume Laforge</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright><lastBuildDate>Thu, 20 Oct 2022 21:56:33 +0100</lastBuildDate><atom:link href="https://glaforge.github.io/tags/choreography/index.xml" rel="self" type="application/rss+xml"/><item><title>Choreography vs Orchestration in Microservices and Best Practices</title><link>https://glaforge.github.io/talks/choreography-vs-orchestration-in-microservices-and-best-practices/</link><pubDate>Thu, 20 Oct 2022 21:56:33 +0100</pubDate><guid>https://glaforge.github.io/talks/choreography-vs-orchestration-in-microservices-and-best-practices/</guid><description>We went from a single monolith to a set of microservices that are small, lightweight, and easy to implement. Microservices enable reusability, make it easier to change and scale apps on demand but they also introduce new problems. How do microservices interact with each other toward a common goal? How do you figure out what went wrong when a business process composed of several microservices fails? Should there be a central orchestrator controlling all interactions between services or should each service work independently, in a loosely coupled way, and only interact through shared events?</description></item></channel></rss>